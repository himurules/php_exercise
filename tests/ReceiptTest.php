<?php
/**
 * Created by PhpStorm.
 * User: himanshukotnala
 * Date: 2020-01-18
 * Time: 15:52
 */

namespace TDD\Test;
require_once dirname(dirname(__FILE__)). DIRECTORY_SEPARATOR.'vendor'.DIRECTORY_SEPARATOR.'autoload.php';
use PHPUnit\Framework\TestCase;
use TDD\Receipt;

class ReceiptTest extends TestCase
{
    protected $_receipt = null;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->_receipt = new Receipt();
    }

    /**
     * @dataProvider provideInput
     */
    public function testTotal($input, $expected, $coupon){
        $output = $this->_receipt->total($input, $coupon);
        $this->assertEquals(
            $expected,
            $output,
            "The total should be {$expected} here!"
        );
    }

    public function testTotalException(){
        $input = [2,3,4,5,6];
        $coupon = 101;
        $this->expectException('BadMethodCallException');
        $this->_receipt->total($input, $coupon);
    }

    public function provideInput(){
        return [
            [[3,2,6,8,6,5],30, null],
            [[3,2,6,8,4,3],13, 50],
        ];
    }

    public function testTax(){
        $total = 100;
        $taxPerc = .1;
        $output = $this->_receipt->calculateTax($taxPerc, $total);
        $this->assertEquals(
            10,
            $output,
            'Expected Tax value here is 10'
        );
    }

    /**
     * @dataProvider provideCurrencyAmt
     */
    public function testCurrencyAmt($input, $expectec, $msg){
        $output = $this->_receipt->calculateCurrencyAmt($input);
        $this->assertSame(
            $expectec,
            $output,
            $msg." ".$expectec
        );
    }

    public function provideCurrencyAmt(){
        return [
            [[1,2,4,5,6,2.5,3.7], 24.20, 'Expected value for currency is '],
            [[1,1], 2.00, 'Expected value for currency is '],
            [[1,5.7], 6.70, 'Expected value for currency is '],
        ];
    }

    public function testPostTaxTotal(){
        $item = [2,3,5,2];
        $tax = .1;
        $coupon = null;
        $receipt = $this->getMockBuilder('TDD\Receipt')
            ->setMethods(['calculateTax', 'total'])
            ->getMock();
        $receipt->expects($this->once())
            ->method('total')
            ->with($item, $coupon)
            ->will($this->returnValue('12'));
        $receipt->expects($this->once())
            ->method('calculateTax')
            ->with($tax, 12)
            ->will($this->returnValue('1.2'));

        $result = $receipt->postTaxTotal($item,$tax,$coupon);
        $this->assertEquals(10.8, $result);
    }

    public function tearDown()
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
        unset($this->_receipt);
    }
}